openapi: 3.0.2
info:
  title: Topcoder Groups API
  description: Topcoder Groups API
  version: 1.0.0
paths:
  /groups:
    get:
      parameters:
      - description: Filter by challengeID.
        in: query
        name: challengeID
        schema:
          type: string
        x-filter:
          field: ChallengeID
      - description: Filter by group type.
        in: query
        name: type
        schema:
          type: string
          default: challenge
          enum:
            - challenge
            - regular
          x-filter:
            field: Type
      - description:  Filter by group privacy.
        in: query
        name: privacy
        schema:
          type: string
          default: public
          enum:
            - public
            - private
            - secret
        x-filter:
          field: Privacy
      - $ref: '#/components/parameters/Page'
      - description: |
          Desired number of items per page.
        in: query
        name: limit
        schema:
          type: integer
          default: 30
          maximum: 100
          minimum: 1
      responses:
        '200':
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/Group'
                type: array
          description: Success
      tags:
      - Groups
      summary: List groups.
    post:
      responses:
        '201':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Group'
          description: Success
      tags:
        - Groups
      requestBody:
        $ref: '#/components/requestBodies/GroupPost'
      summary: Add a group.
  '/groups/{id}':
     get:
      parameters:
      - description: |
          The groupID (int) or challengeID(uuid).
        in: path
        name: id
        required: true
        schema:
          oneOf:
            - type: integer
            - $ref: '#/components/schemas/uuid'
      responses:
        '200':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Group'
          description: Success
      tags:
      - Groups
      summary: Get a group.
     patch:
       parameters:
         - description: The groupID (int) or challengeID(uuid).
           in: path
           name: id
           required: true
           schema:
             oneOf:
               - type: integer
               - $ref: '#/components/schemas/uuid'
       responses:
         '200':
           content:
             'application/json':
               schema:
                 $ref: '#/components/schemas/Group'
           description: Success
       tags:
         - Groups
       requestBody:
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/GroupPatch'
         required: true
       summary: Update a group.
  '/groups/{id}/member/{userid}':
    get:
      parameters:
        - description: The groupID (int) or challengeID(uuid).
          in: path
          name: id
          required: true
          schema:
            oneOf:
              - type: integer
              - $ref: '#/components/schemas/uuid'
        - description: The Vanilla UserID or Topcoder Handle.
          in: path
          name: userid
          required: true
          schema:
            oneOf:
              - type: integer
              - type: string
      responses:
        '200':
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/GroupMemberDetails'
          description: Success
      tags:
        - Groups
      summary: Get a member details.
    patch:
      parameters:
        - description: The groupID (int) or challengeID(uuid).
          in: path
          name: id
          required: true
          schema:
            oneOf:
              - type: integer
              - $ref: '#/components/schemas/uuid'

        - description: The user ID.
          in: path
          name: userid
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Success
      tags:
        - Groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMemberPatch'
        required: true
      summary: Update watch status for a member.
    delete:
      parameters:
        - description: The groupID (int) or challengeID(uuid).
          in: path
          name: id
          required: true
          schema:
            oneOf:
              - type: integer
              - $ref: '#/components/schemas/uuid'
        - description: The Vanilla User ID.
          in: path
          name: userid
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Success
      tags:
        - Groups
      summary: Remove a user from a group.
  '/groups/{id}/members':
    get:
      parameters:
        - description: The groupID (int) or challengeID (uuid).
          in: path
          name: id
          required: true
          schema:
            oneOf:
              - type: integer
              - $ref: '#/components/schemas/uuid'
        - description: |
            Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).
          in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
        - description: Desired number of items per page.
          in: query
          name: limit
          schema:
            type: integer
            default: 30
            maximum: 100
            minimum: 1
      responses:
        '200':
          content:
            'application/json':
              schema:
                items:
                  $ref: '#/components/schemas/GroupMember'
                type: array
          description: Success
      tags:
        - Groups
      summary: The list of group members.
    post:
      parameters:
        - description: The groupID (int) or challengeID(uuid).
          in: path
          name: id
          required: true
          schema:
            oneOf:
              - type: integer
              - $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: Success
      tags:
        - Groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMemberPost'
        required: true
      summary: Add member to a group.
  '/groups/{id}/archive':
    put:
      parameters:
        - description: The groupID (int) or challengeID(uuid).
          in: path
          name: id
          required: true
          schema:
            oneOf:
              - type: integer
              - $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: Success
      tags:
        - Groups
      requestBody:
        required: false
      summary: Archive a group.
  '/groups/{id}/unarchive':
    put:
      parameters:
        - description: The groupID (int) or challengeID(uuid).
          in: path
          name: id
          required: true
          schema:
            oneOf:
              - type: integer
              - $ref: '#/components/schemas/uuid'
      responses:
        '204':
          description: Success
      tags:
        - Groups
      requestBody:
        required: false
      summary: Unarchive a group.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    GroupPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupPost'
      required: true
    GroupPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupPatch'
      required: true
  schemas:
    uuid:
      type: string
      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      # the regex above limits the length;
      # however, some tools might require explicit settings:
      minLength: 36
      maxLength: 36
    Group:
      properties:
        groupID:
          description: The groupID of the group.
          type: integer
        challengeID:
          description: The challengeID of the Topcoder challenge.
          nullable: true
          type: integer
        challengeUrl:
          description: The url of the Topcoder challenge.
          minLength: 1
          type: string
        name:
          description: The name of the group.
          minLength: 1
          type: string
        privacy:
          description: The privacy of this group
          minLength: 1
          enum:
            - public
            - private
            - secret
        type:
          description: The type of this group
          minLength: 1
          enum:
          - challenge
          - regular
        archived:
          description: The archived state of the group
          type: boolean
      required:
      - groupID
      - privacy
      - type
      - name
      - challengeID
      - challengeUrl
      - archived
      type: object
    GroupPost:
      properties:
        name:
          description: The name of the group.
          minLength: 1
          type: string
        privacy:
          type: string
          description: The privacy of the group
          minLength: 1
          enum:
          - public
          - private
          - secret
        type:
          description: The type of this group
          minLength: 1
          enum:
            - challenge
            - regular
        description:
          description: The description of the group.
          minLength: 1
          type: string
        challengeID:
          description: The ID of the Topcoder challenge.
          type: string
        challengeUrl:
          description: The url of the Topcoder challenge.
          type: string
        archived:
          description: The archived state of the group
          type: boolean
      required:
        - name
        - type
        - privacy
        - description
        - challengeID
        - challengeUrl
        - archived
      type: object
    GroupPatch:
      properties:
        name:
          description: The name of the group.
          minLength: 1
          type: string
      required:
        - name
      type: object
    GroupMemberPost:
      description: Add a member to a group
      properties:
        userID:
          description: The Vanilla user ID
          type: integer
        watch:
          description: Watch all group categories
          type: boolean
      required:
        - userID
      type: object
    GroupMemberPatch:
      description: Update watch status for a member
      properties:
        watch:
          description: Watch/unwatch all group categories
          type: boolean
      type: object
    GroupMember:
      properties:
        userID:
          description: The userID of an user.
          type: integer
        name:
          description: The name of an user.
          type: string
      required:
        - userID
        - name
      type: object
    GroupMemberDetails:
      properties:
        userID:
          description: The userID of an user.
          type: integer
        watch:
          description: Watch status
          type: boolean
        unreadNotifications:
          description: Count of unread notifications for the group
          type: integer
      required:
        - userID
        - watch
        - unreadNotifications
      type: object
security:
  - BearerAuth: []